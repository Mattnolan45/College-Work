/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Assignment2.jj */
/*@egen*//*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options { 
    IGNORE_CASE = true;
    DEBUG_TOKEN_MANAGER = false;
                   
                 
                             
}

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/
PARSER_BEGIN(CCALTokeniser)

import java.io.*;
import java.util.*;

public class CCALTokeniser/*@bgen(jjtree)*/implements CCALTokeniserTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected static JJTCCALTokeniserState jjtree = new JJTCCALTokeniserState();

/*@egen*/

		public static String scope = "global";
  		public static SymbolTable symbolTable = new SymbolTable();


	public static void main(String args[]) 
	{


		CCALTokeniser tokeniser;
		if (args.length == 0) 
		{
			System.out.println("Reading from standard input . . .");
			tokeniser = new CCALTokeniser(System.in);
		} 
		else if (args.length == 1) 
		{
			try 
			{
				tokeniser = new CCALTokeniser(new java.io.FileInputStream(args[0]));
			} 
			catch (java.io.FileNotFoundException e) 
			{
				System.err.println("File " + args[0] + " not found.");
				return;
			}
		}
		else 
		{
			System.out.println("SLP Tokeniser: Usage is one of:");
			System.out.println(" java CCALTokeniser < inputfile");
			System.out.println("OR");
			System.out.println(" java CCALTokeniser inputfile");
			return;
		}



		try {

			SimpleNode root = tokeniser.program();
        	System.out.println("Abstract Syntax Tree:");
        	root.dump("");

        	System.out.println("SymbolTable:");
        	symbolTable.PrintTable();

        	System.out.println("\nSemantic Checks");
        	SemanticCheckVisitor scv = new SemanticCheckVisitor();
        	root.jjtAccept(scv, symbolTable);

        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("Parse failure");
        }


	}
}
PARSER_END(CCALTokeniser)
	

/*********************************
***** SECTION 3 - TOKEN DEF  *****
*********************************/

TOKEN_MGR_DECLS :
{
static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

SKIP : 
{
	<"//" (~["\n"])* "\n">
}

SKIP : {
	"/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
	"/*" { commentNesting++;}
	| "*/" { commentNesting--;
			if (commentNesting == 0)
				SwitchTo(DEFAULT);
	}
	|<~[]>
}


TOKEN : /* reserved words */
{
	 < VARIABLE : "var">
	|< CONSTANT : "const">
	|< RETURN 	: "return">
	|< INTEGER  : "integer">
	|< BOOLEAN  : "boolean">
	|< VOID 	: "void"> 
	|< MAIN 	: "main">
	|< IF 		: "if">
	|< ELSE  	: "else">
	|< TRUE 	: "true">
	|< FALSE 	: "false">
	|< WHILE  	: "while">
	|< SKIPTOKEN: "skip">
}


TOKEN : /*tokens in the language*/
{
	 < COMMA 	 : ",">
	|< SEMICOLON : ";">
	|< COLON 	 : ":">
	|< ASSIGNMENT: "=">
	|< LBRACE	 : "{">
	|< RBRACE 	 : "}">
	|< LBRACKET  : "(">
	|< RBRACKET  : ")">
	|< PLUS 	 : "+">
	|< MINUS     : "-">	
	|< TILDE     : "~">
	|< OR 		 : "||">
	|< AND 		 : "&&">
	|< EQUALS    : "==">
	|< NOTEQUALS : "!=">
	|< LT  		 : "<">
	|< LE 		 : "<=">
	|< GT        : ">">
	|< GE        : ">=">
	
}

TOKEN : /* VALUES */
{
     <NUM : "0" | ((<MINUS>)? ["1" - "9"] (<DIGIT>)*) >
	|<#DIGIT: ["0"-"9"] >
	|<ID : <LETTER> (<LETTER> | <DIGIT> | "_")* >
	|<#LETTER: ["A"-"Z", "a"-"z"] >
}

TOKEN: /* Anything not recognised so far */
{
	< OTHER : ~[] >
}


/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/


SimpleNode program()          : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
        try {
/*@egen*/
	decl_list() function_list() main() <EOF>/*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                 }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void decl_list() : {}
{
	(decl() <SEMICOLON> decl_list() )?
}

void decl() : {}
{
	var_decl()
  | const_decl()
}

void var_decl()      : {/*@bgen(jjtree) Var */
                         ASTVar jjtn000 = new ASTVar(JJTVAR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; String id; String type;}
{/*@bgen(jjtree) Var */
        try {
/*@egen*/
	t = <VARIABLE> id = id() <COLON> type = type()/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                       }
/*@egen*/ { jjtn000.value = t.image; symbolTable.addToTable(id,"Var",type,scope);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void const_decl()        : {/*@bgen(jjtree) Const */
                             ASTConst jjtn000 = new ASTConst(JJTCONST);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; String id; String type;}
{/*@bgen(jjtree) Const */
        try {
/*@egen*/
	t = <CONSTANT> id = id() <COLON> type = type() <ASSIGNMENT> expression()/*@bgen(jjtree)*/
                                                                                 {
                                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                                   jjtc000 = false;
                                                                                 }
/*@egen*/ { jjtn000.value = t.image; symbolTable.addToTable(id,"Const",type,scope);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function_list() : {}
{
	(function() function_list())?
}

void function()           : {/*@bgen(jjtree) Function */
                             ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	type = type() id = id() {symbolTable.addToTable(id,"Function",type,scope); scope = id;} <LBRACKET> parameter_list() <RBRACKET> 
	<LBRACE>
	decl_list()
	statement_block()
	<RETURN> <LBRACKET> returnFunc() <RBRACKET> <SEMICOLON>
	<RBRACE>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {scope = "global";}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void returnFunc()         : {/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Return */
        try {
/*@egen*/
	( expression() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}



String type()       : {/*@bgen(jjtree) Type */
                       ASTType jjtn000 = new ASTType(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	t = <INTEGER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.value = t.image; return t.image;}
	| t = <BOOLEAN>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.value = t.image; return t.image;}
	| t = <VOID>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void parameter_list()             : {/*@bgen(jjtree) Param_list */
  ASTParam_list jjtn000 = new ASTParam_list(JJTPARAM_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Param_list */
        try {
/*@egen*/
	(nemp_parameter_list())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void nemp_parameter_list()             : {/*@bgen(jjtree) Parameters */
                                          ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String type; String id;}
{/*@bgen(jjtree) Parameters */
        try {
/*@egen*/
	id = id() <COLON> type = type() (<COMMA> nemp_parameter_list())?/*@bgen(jjtree)*/
                                                                         {
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
                                                                         }
/*@egen*/ {symbolTable.addToTable(id,"Parameters",type,scope);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void main()       : {/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
        try {
/*@egen*/	
	{scope = "main";}
	<MAIN> <LBRACE>	
	decl_list()
	statement_block()
	<RBRACE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statement_block() : {}
{
	(statement() statement_block())?
}

void statement()            : {/*@bgen(jjtree) Statement */
                               ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Statement */
         try {
/*@egen*/
	 id() (t = <ASSIGNMENT> expression() <SEMICOLON>/*@bgen(jjtree) #Assign( 2) */
                                                         {
                                                           ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                         }
                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn001,  2);
                                                           jjtc001 = false;
                                                         }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001,  2);
                                                           }
                                                         }
/*@egen*/              | (function_call())? <SEMICOLON> )
	|<LBRACE> statement_block() <RBRACE>
	|t = <IF> condition() <LBRACE> statement_block() <RBRACE> <ELSE> <LBRACE> statement_block() <RBRACE>/*@bgen(jjtree)*/
                                                                                                             {
                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                               jjtc000 = false;
                                                                                                             }
/*@egen*/ {jjtn000.value = t.image;}
	|t = <WHILE> condition() <LBRACE> statement_block() <RBRACE>/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/ {jjtn000.value = t.image;}
	|<SKIPTOKEN> <SEMICOLON>/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void function_call() : {Token t;}
{
	<LBRACKET> arg_list()/*@bgen(jjtree) #FunctionCall( 1) */
                              {
                                ASTFunctionCall jjtn001 = new ASTFunctionCall(JJTFUNCTIONCALL);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ <RBRACKET>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                }
                              }
/*@egen*/                 
}


void expression()  : {}
{
	choice_expression() expression_arith() 
}

void choice_expression() : {}
{
	
	(<MINUS>)? id() (LOOKAHEAD(1) function_call())? 
	|number() 
	|<TRUE> 
	|<FALSE>
	|<LBRACKET> expression() <RBRACKET>	
}

void expression_arith() : {}
{
	binary_arith_op() expression() 
	|{}
}

void fragment() : {}
{
	expression()	
}

void binary_arith_op() : { Token t;} 
{
	 t = <PLUS>/*@bgen(jjtree) #Plus( 2) */
                    {
                      ASTPlus jjtn001 = new ASTPlus(JJTPLUS);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*//*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtc001 = false;
                    }
/*@egen*/ {jjtn001.value = t.image; }/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
                    }
/*@egen*/          
	|t = <MINUS>/*@bgen(jjtree) #Minus( 2) */
                     {
                       ASTMinus jjtn002 = new ASTMinus(JJTMINUS);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn002,  2);
                       jjtc002 = false;
                     }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                       }
                     }
/*@egen*/           
}



void condition() : {}
{
	choice_condition() condition_simple()
}

void choice_condition() : {Token t;}
{
	t = <AND> condition()/*@bgen(jjtree) #And( 2) */
                              {
                                ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001,  2);
                                jjtc001 = false;
                              }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/         
	|t = <OR> condition()/*@bgen(jjtree) #Or( 2) */
                              {
                                ASTOr jjtn002 = new ASTOr(JJTOR);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn002,  2);
                                jjtc002 = false;
                              }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
                              }
/*@egen*/        
	|{}
}

void condition_simple() : {}
{
     <TILDE> condition()
	|LOOKAHEAD(1) <LBRACKET>  condition() <RBRACKET>
	|expression() comp_op() expression()
}

void  comp_op()       : {/*@bgen(jjtree) Comp */
                         ASTComp jjtn000 = new ASTComp(JJTCOMP);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} 
{/*@bgen(jjtree) Comp */
          try {
/*@egen*/
	  t = <EQUALS>/*@bgen(jjtree) equals */
                       {
                         ASTequals jjtn001 = new ASTequals(JJTEQUALS);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
                       }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
                       }
/*@egen*/         
	| t = <NOTEQUALS>/*@bgen(jjtree) notEquals */
                          {
                            ASTnotEquals jjtn002 = new ASTnotEquals(JJTNOTEQUALS);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
                          }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
                          }
/*@egen*/            
	| t = <LT>/*@bgen(jjtree) #LT( 2) */
                   {
                     ASTLT jjtn003 = new ASTLT(JJTLT);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn003,  2);
                     jjtc003 = false;
                   }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003,  2);
                     }
                   }
/*@egen*/         
	| t = <LE>/*@bgen(jjtree) #LE( 2) */
                   {
                     ASTLE jjtn004 = new ASTLE(JJTLE);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn004,  2);
                     jjtc004 = false;
                   }
/*@egen*/ {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004,  2);
                     }
                   }
/*@egen*/        
	| t = <GT>/*@bgen(jjtree) #GT( 2) */
                   {
                     ASTGT jjtn005 = new ASTGT(JJTGT);
                     boolean jjtc005 = true;
                     jjtree.openNodeScope(jjtn005);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn005,  2);
                     jjtc005 = false;
                   }
/*@egen*/ {jjtn005.value = t.image;}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc005) {
                       jjtree.closeNodeScope(jjtn005,  2);
                     }
                   }
/*@egen*/        
	| t = <GE>/*@bgen(jjtree) #GE( 2) */
                   {
                     ASTGE jjtn006 = new ASTGE(JJTGE);
                     boolean jjtc006 = true;
                     jjtree.openNodeScope(jjtn006);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn006,  2);
                     jjtc006 = false;
                   }
/*@egen*/ {jjtn006.value = t.image;}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc006) {
                       jjtree.closeNodeScope(jjtn006,  2);
                     }
                   }
/*@egen*/        /*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void arg_list() : {}
{
	(nemp_arg_list())?
}

void nemp_arg_list() : {}
{
	<ID> (<COMMA> nemp_arg_list())?
}

String id()     : {/*@bgen(jjtree) ID */
                   ASTID jjtn000 = new ASTID(JJTID);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t = <ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image; return t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void number()        : {/*@bgen(jjtree) Number */
                        ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  t = <NUM>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void bool()      : {/*@bgen(jjtree) Bool */
                    ASTBool jjtn000 = new ASTBool(JJTBOOL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Bool */
  try {
/*@egen*/
  t = <TRUE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.value = t.image; }
| t = <FALSE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}