/* CCALTokeniser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CCALTokeniser.java */
import java.io.*;
import java.util.*;

public class CCALTokeniser/*@bgen(jjtree)*/implements CCALTokeniserTreeConstants, CCALTokeniserConstants {/*@bgen(jjtree)*/
  protected static JJTCCALTokeniserState jjtree = new JJTCCALTokeniserState();
                public static String scope = "global";
                public static SymbolTable symbolTable = new SymbolTable();


        public static void main(String args[])
        {


                CCALTokeniser tokeniser;
                if (args.length == 0)
                {
                        System.out.println("Reading from standard input . . .");
                        tokeniser = new CCALTokeniser(System.in);
                }
                else if (args.length == 1)
                {
                        try
                        {
                                tokeniser = new CCALTokeniser(new java.io.FileInputStream(args[0]));
                        }
                        catch (java.io.FileNotFoundException e)
                        {
                                System.err.println("File " + args[0] + " not found.");
                                return;
                        }
                }
                else
                {
                        System.out.println("SLP Tokeniser: Usage is one of:");
                        System.out.println(" java CCALTokeniser < inputfile");
                        System.out.println("OR");
                        System.out.println(" java CCALTokeniser inputfile");
                        return;
                }



                try {

                        SimpleNode root = tokeniser.program();
                System.out.println("Abstract Syntax Tree:");
                root.dump("");

                System.out.println("SymbolTable:");
                symbolTable.PrintTable();

                System.out.println("\u005cnSemantic Checks");
                SemanticCheckVisitor scv = new SemanticCheckVisitor();
                root.jjtAccept(scv, symbolTable);

        } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("Parse failure");
        }


        }

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/
  static final public 

SimpleNode program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      decl_list();
      function_list();
      main();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void decl_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARIABLE:
    case CONSTANT:{
      decl();
      jj_consume_token(SEMICOLON);
      decl_list();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARIABLE:{
      var_decl();
      break;
      }
    case CONSTANT:{
      const_decl();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {/*@bgen(jjtree) Var */
                         ASTVar jjtn000 = new ASTVar(JJTVAR);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(VARIABLE);
      id = id();
      jj_consume_token(COLON);
      type = type();
jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
jjtn000.value = t.image; symbolTable.addToTable(id,"Var",type,scope);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void const_decl() throws ParseException {/*@bgen(jjtree) Const */
                             ASTConst jjtn000 = new ASTConst(JJTCONST);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      t = jj_consume_token(CONSTANT);
      id = id();
      jj_consume_token(COLON);
      type = type();
      jj_consume_token(ASSIGNMENT);
      expression();
jjtree.closeNodeScope(jjtn000, true);
                                                                                   jjtc000 = false;
jjtn000.value = t.image; symbolTable.addToTable(id,"Const",type,scope);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void function_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case VOID:{
      function();
      function_list();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void function() throws ParseException {/*@bgen(jjtree) Function */
                             ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t; String id; String type;
    try {
      type = type();
      id = id();
symbolTable.addToTable(id,"Function",type,scope); scope = id;
      jj_consume_token(LBRACKET);
      parameter_list();
      jj_consume_token(RBRACKET);
      jj_consume_token(LBRACE);
      decl_list();
      statement_block();
      jj_consume_token(RETURN);
      jj_consume_token(LBRACKET);
      returnFunc();
      jj_consume_token(RBRACKET);
      jj_consume_token(SEMICOLON);
      jj_consume_token(RBRACE);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
scope = "global";
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void returnFunc() throws ParseException {/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:
      case FALSE:
      case LBRACKET:
      case MINUS:
      case NUM:
      case ID:{
        expression();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public String type() throws ParseException {/*@bgen(jjtree) Type */
                       ASTType jjtn000 = new ASTType(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
        break;
        }
      case BOOLEAN:{
        t = jj_consume_token(BOOLEAN);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
        break;
        }
      case VOID:{
        t = jj_consume_token(VOID);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void parameter_list() throws ParseException {/*@bgen(jjtree) Param_list */
  ASTParam_list jjtn000 = new ASTParam_list(JJTPARAM_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        nemp_parameter_list();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void nemp_parameter_list() throws ParseException {/*@bgen(jjtree) Parameters */
                                          ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
                                          boolean jjtc000 = true;
                                          jjtree.openNodeScope(jjtn000);Token t; String type; String id;
    try {
      id = id();
      jj_consume_token(COLON);
      type = type();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        nemp_parameter_list();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
symbolTable.addToTable(id,"Parameters",type,scope);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void main() throws ParseException {/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
scope = "main";
      jj_consume_token(MAIN);
      jj_consume_token(LBRACE);
      decl_list();
      statement_block();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void statement_block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case WHILE:
    case SKIPTOKEN:
    case LBRACE:
    case ID:{
      statement();
      statement_block();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void statement() throws ParseException {/*@bgen(jjtree) Statement */
                               ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        id();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGNMENT:{
          t = jj_consume_token(ASSIGNMENT);
          expression();
          jj_consume_token(SEMICOLON);
ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
          try {
jjtree.closeNodeScope(jjtn001,  2);
                                                           jjtc001 = false;
jjtn001.value = t.image;
          } finally {
if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001,  2);
                                                           }
          }
          break;
          }
        case SEMICOLON:
        case LBRACKET:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACKET:{
            function_call();
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          jj_consume_token(SEMICOLON);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case LBRACE:{
        jj_consume_token(LBRACE);
        statement_block();
        jj_consume_token(RBRACE);
        break;
        }
      case IF:{
        t = jj_consume_token(IF);
        condition();
        jj_consume_token(LBRACE);
        statement_block();
        jj_consume_token(RBRACE);
        jj_consume_token(ELSE);
        jj_consume_token(LBRACE);
        statement_block();
        jj_consume_token(RBRACE);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                               jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case WHILE:{
        t = jj_consume_token(WHILE);
        condition();
        jj_consume_token(LBRACE);
        statement_block();
        jj_consume_token(RBRACE);
jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case SKIPTOKEN:{
        jj_consume_token(SKIPTOKEN);
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  static final public void function_call() throws ParseException {Token t;
    jj_consume_token(LBRACKET);
    arg_list();
ASTFunctionCall jjtn001 = new ASTFunctionCall(JJTFUNCTIONCALL);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(RBRACKET);
    } finally {
if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  1);
                                }
    }
  }

  static final public void expression() throws ParseException {
    choice_expression();
    expression_arith();
  }

  static final public void choice_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:
    case ID:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      id();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        function_call();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
      }
    case NUM:{
      number();
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      expression();
      jj_consume_token(RBRACKET);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression_arith() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
      binary_arith_op();
      expression();
      break;
      }
    default:
      jj_la1[14] = jj_gen;

    }
  }

  static final public void fragment() throws ParseException {
    expression();
  }

  static final public void binary_arith_op() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:{
      t = jj_consume_token(PLUS);
ASTPlus jjtn001 = new ASTPlus(JJTPLUS);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
                      jjtc001 = false;
jjtn001.value = t.image;
      } finally {
if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
      }
      break;
      }
    case MINUS:{
      t = jj_consume_token(MINUS);
ASTMinus jjtn002 = new ASTMinus(JJTMINUS);
                       boolean jjtc002 = true;
                       jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002,  2);
                       jjtc002 = false;
jjtn002.value = t.image;
      } finally {
if (jjtc002) {
                         jjtree.closeNodeScope(jjtn002,  2);
                       }
      }
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {
    choice_condition();
    condition_simple();
  }

  static final public void choice_condition() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      t = jj_consume_token(AND);
      condition();
ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
                                jjtc001 = false;
jjtn001.value = t.image;
      } finally {
if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
      }
      break;
      }
    case OR:{
      t = jj_consume_token(OR);
      condition();
ASTOr jjtn002 = new ASTOr(JJTOR);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002,  2);
                                jjtc002 = false;
jjtn002.value = t.image;
      } finally {
if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  2);
                                }
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;

    }
  }

  static final public void condition_simple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TILDE:{
      jj_consume_token(TILDE);
      condition();
      break;
      }
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      condition();
      jj_consume_token(RBRACKET);
      break;
      }
    case TRUE:
    case FALSE:
    case MINUS:
    case NUM:
    case ID:{
      expression();
      comp_op();
      expression();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comp_op() throws ParseException {/*@bgen(jjtree) Comp */
                         ASTComp jjtn000 = new ASTComp(JJTCOMP);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        t = jj_consume_token(EQUALS);
ASTequals jjtn001 = new ASTequals(JJTEQUALS);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, true);
                         jjtc001 = false;
jjtn001.value = t.image;
        } finally {
if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001, true);
                         }
        }
        break;
        }
      case NOTEQUALS:{
        t = jj_consume_token(NOTEQUALS);
ASTnotEquals jjtn002 = new ASTnotEquals(JJTNOTEQUALS);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
        try {
jjtree.closeNodeScope(jjtn002, true);
                            jjtc002 = false;
jjtn002.value = t.image;
        } finally {
if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                            }
        }
        break;
        }
      case LT:{
        t = jj_consume_token(LT);
ASTLT jjtn003 = new ASTLT(JJTLT);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
        try {
jjtree.closeNodeScope(jjtn003,  2);
                     jjtc003 = false;
jjtn003.value = t.image;
        } finally {
if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003,  2);
                     }
        }
        break;
        }
      case LE:{
        t = jj_consume_token(LE);
ASTLE jjtn004 = new ASTLE(JJTLE);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
        try {
jjtree.closeNodeScope(jjtn004,  2);
                     jjtc004 = false;
jjtn004.value = t.image;
        } finally {
if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004,  2);
                     }
        }
        break;
        }
      case GT:{
        t = jj_consume_token(GT);
ASTGT jjtn005 = new ASTGT(JJTGT);
                     boolean jjtc005 = true;
                     jjtree.openNodeScope(jjtn005);
        try {
jjtree.closeNodeScope(jjtn005,  2);
                     jjtc005 = false;
jjtn005.value = t.image;
        } finally {
if (jjtc005) {
                       jjtree.closeNodeScope(jjtn005,  2);
                     }
        }
        break;
        }
      case GE:{
        t = jj_consume_token(GE);
ASTGE jjtn006 = new ASTGE(JJTGE);
                     boolean jjtc006 = true;
                     jjtree.openNodeScope(jjtn006);
        try {
jjtree.closeNodeScope(jjtn006,  2);
                     jjtc006 = false;
jjtn006.value = t.image;
        } finally {
if (jjtc006) {
                       jjtree.closeNodeScope(jjtn006,  2);
                     }
        }
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  static final public void arg_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      nemp_arg_list();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  static final public void nemp_arg_list() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      nemp_arg_list();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public String id() throws ParseException {/*@bgen(jjtree) ID */
                   ASTID jjtn000 = new ASTID(JJTID);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
jjtn000.value = t.image; {if ("" != null) return t.image;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void number() throws ParseException {/*@bgen(jjtree) Number */
                        ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void bool() throws ParseException {/*@bgen(jjtree) Bool */
                    ASTBool jjtn000 = new ASTBool(JJTBOOL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        t = jj_consume_token(TRUE);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CCALTokeniserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800,0x1800,0x1c000,0x40300000,0x1c000,0x0,0x1000000,0x10c40000,0x40000000,0x4a000000,0x10c40000,0x0,0x40000000,0x40300000,0x0,0x0,0x0,0x40300000,0x0,0x0,0x1000000,0x300000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x2802,0x0,0x2000,0x0,0x2000,0x0,0x0,0x2000,0x2,0x0,0x2802,0x3,0x3,0x18,0x2806,0x7e0,0x2000,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public CCALTokeniser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CCALTokeniser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CCALTokeniserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CCALTokeniser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CCALTokeniserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CCALTokeniser(CCALTokeniserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CCALTokeniserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
